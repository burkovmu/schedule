const fs = require('fs');
const path = require('path');

// –ß–∏—Ç–∞–µ–º SQL —Ñ–∞–π–ª
const sqlContent = fs.readFileSync(path.join(__dirname, 'supabase-quick-upload.sql'), 'utf8');

// –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ SQL
const parseSQLData = (sql) => {
  const data = {
    groups: [],
    subjects: [],
    teachers: [],
    assistants: [],
    rooms: [],
    lessons: []
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã—Ö INSERT'–æ–≤
  const parseInsert = (tableName, sql) => {
    const regex = new RegExp(`INSERT INTO ${tableName}[^;]+;`, 'gs');
    const match = sql.match(regex);
    if (!match) return [];

    const insertSQL = match[0];
    const valuesMatch = insertSQL.match(/VALUES\s*\(([^;]+)\)/s);
    if (!valuesMatch) return [];

    const values = valuesMatch[1];
    // –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ ),( –Ω–æ —É—á–∏—Ç—ã–≤–∞–µ–º, —á—Ç–æ –≤–Ω—É—Ç—Ä–∏ –∑–Ω–∞—á–µ–Ω–∏–π –º–æ–≥—É—Ç –±—ã—Ç—å –∑–∞–ø—è—Ç—ã–µ
    const rows = [];
    let currentRow = '';
    let parenCount = 0;
    let inString = false;
    let stringChar = '';

    for (let i = 0; i < values.length; i++) {
      const char = values[i];
      
      if (!inString && (char === "'" || char === '"')) {
        inString = true;
        stringChar = char;
      } else if (inString && char === stringChar) {
        inString = false;
        stringChar = '';
      } else if (!inString && char === '(') {
        parenCount++;
      } else if (!inString && char === ')') {
        parenCount--;
        if (parenCount === 0) {
          rows.push(currentRow);
          currentRow = '';
          continue;
        }
      }
      
      currentRow += char;
    }

    return rows.map(row => {
      const cleanRow = row.replace(/^\(|\)$/g, '');
      const parts = [];
      let currentPart = '';
      let inString = false;
      let stringChar = '';

      for (let i = 0; i < cleanRow.length; i++) {
        const char = cleanRow[i];
        
        if (!inString && (char === "'" || char === '"')) {
          inString = true;
          stringChar = char;
        } else if (inString && char === stringChar) {
          inString = false;
          stringChar = '';
        } else if (!inString && char === ',' && parts.length < 2) {
          parts.push(currentPart.trim().replace(/'/g, ''));
          currentPart = '';
          continue;
        }
        
        currentPart += char;
      }
      
      if (currentPart.trim()) {
        parts.push(currentPart.trim().replace(/'/g, ''));
      }

      return parts;
    });
  };

  // –ü–∞—Ä—Å–∏–º –≥—Ä—É–ø–ø—ã
  const groupRows = parseInsert('groups', sql);
  data.groups = groupRows.map(parts => ({
    id: parts[0],
    name: parts[1],
    display_order: parseInt(parts[2])
  }));

  // –ü–∞—Ä—Å–∏–º –ø—Ä–µ–¥–º–µ—Ç—ã
  const subjectRows = parseInsert('subjects', sql);
  data.subjects = subjectRows.map(parts => ({
    id: parts[0],
    name: parts[1],
    color: parts[2]
  }));

  // –ü–∞—Ä—Å–∏–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
  const teacherRows = parseInsert('teachers', sql);
  data.teachers = teacherRows.map(parts => ({
    id: parts[0],
    name: parts[1]
  }));

  // –ü–∞—Ä—Å–∏–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤
  const assistantRows = parseInsert('assistants', sql);
  data.assistants = assistantRows.map(parts => ({
    id: parts[0],
    name: parts[1]
  }));

  // –ü–∞—Ä—Å–∏–º –∞—É–¥–∏—Ç–æ—Ä–∏–∏
  const roomRows = parseInsert('rooms', sql);
  data.rooms = roomRows.map(parts => ({
    id: parts[0],
    name: parts[1]
  }));

  // –ü–∞—Ä—Å–∏–º —É—Ä–æ–∫–∏ (–±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞)
  const lessonRows = parseInsert('lessons', sql);
  data.lessons = lessonRows.map(parts => ({
    id: parts[0],
    group_id: parts[1],
    time_slot: parts[2],
    subject_id: parts[3],
    teacher_id: parts[4],
    assistant_id: parts[5] === 'NULL' ? null : parts[5],
    room_id: parts[6],
    duration: parseInt(parts[7]),
    color: parts[8] === 'NULL' ? null : parts[8],
    comment: parts[9] === 'NULL' ? null : parts[9]
  }));

  return data;
};

// –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ
const parsedData = parseSQLData(sqlContent);

// –°–æ–∑–¥–∞–µ–º JSON —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏
const outputPath = path.join(__dirname, 'backend', 'data.json');
fs.writeFileSync(outputPath, JSON.stringify(parsedData, null, 2));

console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ SQL —Ñ–∞–π–ª–∞!');
console.log(`üìä –ì—Ä—É–ø–ø: ${parsedData.groups.length}`);
console.log(`üìö –ü—Ä–µ–¥–º–µ—Ç–æ–≤: ${parsedData.subjects.length}`);
console.log(`üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π: ${parsedData.teachers.length}`);
console.log(`üë®‚Äçüíº –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤: ${parsedData.assistants.length}`);
console.log(`üè¢ –ê—É–¥–∏—Ç–æ—Ä–∏–π: ${parsedData.rooms.length}`);
console.log(`üìÖ –£—Ä–æ–∫–æ–≤: ${parsedData.lessons.length}`);
console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤: ${outputPath}`);
