import { ScheduleData, Lesson, Group, TimeSlot, Teacher, Subject, Room, Assistant } from '../types';

// –¢–∏–ø—ã –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
export interface CreateLessonData {
  group_id: string;
  time_slot: string;
  subject_id: string;
  teacher_id: string;
  assistant_id?: string;
  room_id: string;
  duration: number;
  color?: string;
  comment?: string;
  additional_teachers?: string[];
  additional_assistants?: string[];
}

export interface UpdateLessonData {
  group_id?: string;
  time_slot?: string;
  subject_id?: string;
  teacher_id?: string;
  assistant_id?: string;
  room_id?: string;
  duration?: number;
  color?: string;
  comment?: string;
  additional_teachers?: string[];
  additional_assistants?: string[];
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ API URL –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
const getApiBaseUrl = () => {
  // –ï—Å–ª–∏ –∑–∞–¥–∞–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
  if (process.env.REACT_APP_API_URL) {
    console.log('üîß Using REACT_APP_API_URL:', process.env.REACT_APP_API_URL);
    return process.env.REACT_APP_API_URL;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
  const hostname = window.location.hostname;
  const isLocalhost = hostname === 'localhost' || 
                     hostname === '127.0.0.1' ||
                     hostname.includes('192.168.') ||
                     hostname.includes('10.0.');
  
  console.log('üåê Hostname:', hostname);
  console.log('üîß Is localhost:', isLocalhost);
  
  // –ï—Å–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ - –∏—Å–ø–æ–ª—å–∑—É–µ–º localhost:5000, –∏–Ω–∞—á–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å
  const apiUrl = isLocalhost ? 'http://localhost:5000/api' : '/api';
  console.log('üîß API URL:', apiUrl);
  
  return apiUrl;
};

const API_BASE_URL = getApiBaseUrl();

// –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
export const fetchScheduleData = async (): Promise<ScheduleData> => {
  try {
    console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å URL:', API_BASE_URL);
    console.log('üåê Hostname:', window.location.hostname);
    console.log('üîß Environment:', process.env.NODE_ENV);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç–¥–µ–ª—å–Ω–æ
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ –≥—Ä—É–ø–ø–∞–º...');
    const groupsResponse = await fetch(`${API_BASE_URL}/groups`);
    console.log('üì° Groups response status:', groupsResponse.status);
    console.log('üì° Groups response ok:', groupsResponse.ok);
    
    if (!groupsResponse.ok) {
      const errorText = await groupsResponse.text();
      console.error('‚ùå Groups response error:', errorText);
      throw new Error(`HTTP ${groupsResponse.status}: ${groupsResponse.statusText}`);
    }
    
    const groups = await groupsResponse.json();
    console.log('‚úÖ Groups loaded:', groups.length, 'items');
    
    const [lessons, subjects, teachers, assistants, rooms, timeSlots] = await Promise.all([
      fetch(`${API_BASE_URL}/lessons`).then(res => {
        if (!res.ok) throw new Error(`HTTP ${res.status}: ${res.statusText}`);
        return res.json();
      }),
      fetch(`${API_BASE_URL}/subjects`).then(res => {
        if (!res.ok) throw new Error(`HTTP ${res.status}: ${res.statusText}`);
        return res.json();
      }),
      fetch(`${API_BASE_URL}/teachers`).then(res => {
        if (!res.ok) throw new Error(`HTTP ${res.status}: ${res.statusText}`);
        return res.json();
      }),
      fetch(`${API_BASE_URL}/assistants`).then(res => {
        if (!res.ok) throw new Error(`HTTP ${res.status}: ${res.statusText}`);
        return res.json();
      }),
      fetch(`${API_BASE_URL}/rooms`).then(res => {
        if (!res.ok) throw new Error(`HTTP ${res.status}: ${res.statusText}`);
        return res.json();
      }),
      fetch(`${API_BASE_URL}/lessons/time-slots/all`).then(res => {
        if (!res.ok) throw new Error(`HTTP ${res.status}: ${res.statusText}`);
        return res.json();
      })
    ]);

    console.log('‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', {
      groups: groups.length,
      lessons: lessons.length,
      subjects: subjects.length,
      teachers: teachers.length,
      assistants: assistants.length,
      rooms: rooms.length,
      timeSlots: timeSlots.length
    });
    
    
    return {
      groups,
      lessons,
      subjects,
      teachers,
      assistants,
      rooms,
      timeSlots
    };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    console.error('üîó API URL:', API_BASE_URL);
    console.error('üåê Hostname:', window.location.hostname);
    console.error('üîß Environment:', process.env.NODE_ENV);
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è');
  }
};

// –°–æ–∑–¥–∞–Ω–∏–µ —É—Ä–æ–∫–∞
export const createLesson = async (lessonData: CreateLessonData): Promise<Lesson> => {
  try {
    const response = await fetch(`${API_BASE_URL}/lessons`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(lessonData),
    });

    if (!response.ok) {
      throw new Error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É—Ä–æ–∫–∞');
    }

    return await response.json();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É—Ä–æ–∫–∞:', error);
    throw error;
  }
};

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞
export const updateLesson = async (id: string, updates: UpdateLessonData): Promise<void> => {
  try {
    const response = await fetch(`${API_BASE_URL}/lessons/${id}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(updates),
    });

    if (!response.ok) {
      throw new Error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞:', error);
    throw error;
  }
};

// –£–¥–∞–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞
export const deleteLesson = async (id: string): Promise<void> => {
  try {
    const response = await fetch(`${API_BASE_URL}/lessons/${id}`, {
      method: 'DELETE',
    });

    if (!response.ok) {
      throw new Error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—Ä–æ–∫–∞:', error);
    throw error;
  }
};

// –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
export const createGroup = async (groupData: Partial<Group>): Promise<Group> => {
  try {
    const response = await fetch(`${API_BASE_URL}/groups`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(groupData),
    });

    if (!response.ok) {
      throw new Error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã');
    }

    return await response.json();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã:', error);
    throw error;
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
export const fetchTimeSlots = async (): Promise<TimeSlot[]> => {
  try {
    const response = await fetch(`${API_BASE_URL}/lessons/time-slots/all`);
    if (!response.ok) {
      throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤');
    }
    return await response.json();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤:', error);
    throw error;
  }
};

// –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
export const createTeacher = async (teacherData: Partial<Teacher>): Promise<Teacher> => {
  try {
    const response = await fetch(`${API_BASE_URL}/teachers`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(teacherData),
    });

    if (!response.ok) {
      throw new Error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è');
    }

    return await response.json();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:', error);
    throw error;
  }
};

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
export const updateTeacher = async (id: string, updates: Partial<Teacher>): Promise<void> => {
  try {
    const response = await fetch(`${API_BASE_URL}/teachers/${id}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(updates),
    });

    if (!response.ok) {
      throw new Error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:', error);
    throw error;
  }
};

// –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
export const deleteTeacher = async (id: string): Promise<void> => {
  try {
    const response = await fetch(`${API_BASE_URL}/teachers/${id}`, {
      method: 'DELETE',
    });

    if (!response.ok) {
      throw new Error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:', error);
    throw error;
  }
};

// –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
export const createSubject = async (subjectData: Partial<Subject>): Promise<Subject> => {
  try {
    const response = await fetch(`${API_BASE_URL}/subjects`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(subjectData),
    });

    if (!response.ok) {
      throw new Error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞');
    }

    return await response.json();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞:', error);
    throw error;
  }
};

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
export const updateSubject = async (id: string, updates: Partial<Subject>): Promise<void> => {
  try {
    const response = await fetch(`${API_BASE_URL}/subjects/${id}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(updates),
    });

    if (!response.ok) {
      throw new Error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞:', error);
    throw error;
  }
};

// –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
export const deleteSubject = async (id: string): Promise<void> => {
  try {
    const response = await fetch(`${API_BASE_URL}/subjects/${id}`, {
      method: 'DELETE',
    });

    if (!response.ok) {
      throw new Error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞:', error);
    throw error;
  }
};

// –°–æ–∑–¥–∞–Ω–∏–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏
export const createRoom = async (roomData: Partial<Room>): Promise<Room> => {
  try {
    const response = await fetch(`${API_BASE_URL}/rooms`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(roomData),
    });

    if (!response.ok) {
      throw new Error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏');
    }

    return await response.json();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏:', error);
    throw error;
  }
};

// –£–¥–∞–ª–µ–Ω–∏–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏
export const deleteRoom = async (id: string): Promise<void> => {
  try {
    const response = await fetch(`${API_BASE_URL}/rooms/${id}`, {
      method: 'DELETE',
    });

    if (!response.ok) {
      throw new Error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏:', error);
    throw error;
  }
};

// –°–æ–∑–¥–∞–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
export const createAssistant = async (assistantData: Partial<Assistant>): Promise<Assistant> => {
  try {
    const response = await fetch(`${API_BASE_URL}/assistants`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(assistantData),
    });

    if (!response.ok) {
      throw new Error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞');
    }

    return await response.json();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞:', error);
    throw error;
  }
};

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
export const updateAssistant = async (id: string, updates: Partial<Assistant>): Promise<void> => {
  try {
    const response = await fetch(`${API_BASE_URL}/assistants/${id}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(updates),
    });

    if (!response.ok) {
      throw new Error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞:', error);
    throw error;
  }
};

// –£–¥–∞–ª–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
export const deleteAssistant = async (id: string): Promise<void> => {
  try {
    const response = await fetch(`${API_BASE_URL}/assistants/${id}`, {
      method: 'DELETE',
    });

    if (!response.ok) {
      throw new Error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞:', error);
    throw error;
  }
};

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã
export const updateGroup = async (id: string, groupData: Partial<Group>): Promise<Group> => {
  try {
    const response = await fetch(`${API_BASE_URL}/groups/${id}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(groupData),
    });

    if (!response.ok) {
      throw new Error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã');
    }

    return await response.json();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã:', error);
    throw error;
  }
};

// –£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã
export const deleteGroup = async (id: string): Promise<void> => {
  try {
    const response = await fetch(`${API_BASE_URL}/groups/${id}`, {
      method: 'DELETE',
    });

    if (!response.ok) {
      throw new Error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã:', error);
    throw error;
  }
};

// –ú–∞—Å—Å–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
export const createTeachersBulk = async (names: string[]): Promise<Teacher[]> => {
  try {
    console.log('üîß createTeachersBulk called with names:', names);
    console.log('üîß API_BASE_URL:', API_BASE_URL);
    console.log('üîß Request URL:', `${API_BASE_URL}/teachers/bulk`);
    
    const requestBody = { names };
    console.log('üîß Request body:', requestBody);
    
    const response = await fetch(`${API_BASE_URL}/teachers/bulk`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(requestBody),
    });

    console.log('üîß Response status:', response.status);
    console.log('üîß Response ok:', response.ok);
    console.log('üîß Response headers:', Object.fromEntries(response.headers.entries()));

    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå Response error text:', errorText);
      throw new Error(`–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π: ${response.status} ${response.statusText}`);
    }

    const result = await response.json();
    console.log('‚úÖ createTeachersBulk success:', result);
    return result;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π:', error);
    console.error('‚ùå Error stack:', error instanceof Error ? error.stack : 'No stack trace');
    throw error;
  }
};

// –ú–∞—Å—Å–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
export const createSubjectsBulk = async (names: string[]): Promise<Subject[]> => {
  try {
    const response = await fetch(`${API_BASE_URL}/subjects/bulk`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ names }),
    });

    if (!response.ok) {
      throw new Error('–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤');
    }

    return await response.json();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤:', error);
    throw error;
  }
};

// –ú–∞—Å—Å–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∞—É–¥–∏—Ç–æ—Ä–∏–π
export const createRoomsBulk = async (names: string[]): Promise<Room[]> => {
  try {
    const response = await fetch(`${API_BASE_URL}/rooms/bulk`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ names }),
    });

    if (!response.ok) {
      throw new Error('–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∞—É–¥–∏—Ç–æ—Ä–∏–π');
    }

    return await response.json();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∞—É–¥–∏—Ç–æ—Ä–∏–π:', error);
    throw error;
  }
};

// –ú–∞—Å—Å–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø
export const createGroupsBulk = async (names: string[]): Promise<Group[]> => {
  try {
    const response = await fetch(`${API_BASE_URL}/groups/bulk`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ names }),
    });

    if (!response.ok) {
      throw new Error('–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø');
    }

    return await response.json();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø:', error);
    throw error;
  }
};

// –ú–∞—Å—Å–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤
export const createAssistantsBulk = async (names: string[]): Promise<Assistant[]> => {
  try {
    console.log('üîß createAssistantsBulk called with names:', names);
    console.log('üîß API_BASE_URL:', API_BASE_URL);
    console.log('üîß Request URL:', `${API_BASE_URL}/assistants/bulk`);
    
    const requestBody = { names };
    console.log('üîß Request body:', requestBody);
    
    const response = await fetch(`${API_BASE_URL}/assistants/bulk`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(requestBody),
    });

    console.log('üîß Response status:', response.status);
    console.log('üîß Response ok:', response.ok);
    console.log('üîß Response headers:', Object.fromEntries(response.headers.entries()));

    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå Response error text:', errorText);
      throw new Error(`–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤: ${response.status} ${response.statusText}`);
    }

    const result = await response.json();
    console.log('‚úÖ createAssistantsBulk success:', result);
    return result;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤:', error);
    console.error('‚ùå Error stack:', error instanceof Error ? error.stack : 'No stack trace');
    throw error;
  }
};