import React, { useState } from 'react';
import { 
  createTeachersBulk, 
  createSubjectsBulk, 
  createRoomsBulk, 
  createGroupsBulk, 
  createAssistantsBulk 
} from '../utils/api';

interface BulkUploadDialogProps {
  type: 'teachers' | 'subjects' | 'rooms' | 'groups' | 'assistants';
  title: string;
  isOpen: boolean;
  onClose: () => void;
  onSuccess: (count: number) => void;
  onNotification: (notification: { type: 'success' | 'error'; message: string }) => void;
}

const BulkUploadDialog: React.FC<BulkUploadDialogProps> = ({
  type,
  title,
  isOpen,
  onClose,
  onSuccess,
  onNotification
}) => {
  const [text, setText] = useState('');
  const [loading, setLoading] = useState(false);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!text.trim()) {
      onNotification({
        type: 'error',
        message: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö'
      });
      return;
    }

    // –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ
    const names = text
      .split('\n')
      .map(line => line.trim())
      .filter(line => line.length > 0);

    if (names.length === 0) {
      onNotification({
        type: 'error',
        message: '–°–ø–∏—Å–æ–∫ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö'
      });
      return;
    }

    setLoading(true);
    try {
      let result;
      switch (type) {
        case 'teachers':
          result = await createTeachersBulk(names);
          break;
        case 'subjects':
          result = await createSubjectsBulk(names);
          break;
        case 'rooms':
          result = await createRoomsBulk(names);
          break;
        case 'groups':
          result = await createGroupsBulk(names);
          break;
        case 'assistants':
          result = await createAssistantsBulk(names);
          break;
        default:
          throw new Error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö');
      }

      onNotification({
        type: 'success',
        message: `–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ ${result.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`
      });
      
      onSuccess(result.length);
      setText('');
      onClose();
    } catch (error) {
      onNotification({
        type: 'error',
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö'
      });
    } finally {
      setLoading(false);
    }
  };

  const getPlaceholder = () => {
    switch (type) {
      case 'teachers':
        return '–ò–≤–∞–Ω–æ–≤ –ò.–ò.\n–ü–µ—Ç—Ä–æ–≤ –ü.–ü.\n–°–∏–¥–æ—Ä–æ–≤ –°.–°.';
      case 'subjects':
        return '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞\n–§–∏–∑–∏–∫–∞\n–•–∏–º–∏—è\n–ë–∏–æ–ª–æ–≥–∏—è';
      case 'rooms':
        return '–ê—É–¥–∏—Ç–æ—Ä–∏—è 101\n–ê—É–¥–∏—Ç–æ—Ä–∏—è 102\n–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è 201';
      case 'groups':
        return '–ì—Ä—É–ø–ø–∞ –ê\n–ì—Ä—É–ø–ø–∞ –ë\n–ì—Ä—É–ø–ø–∞ –í';
      case 'assistants':
        return '–ö–æ–∑–ª–æ–≤ –ö.–ö.\n–ú–æ—Ä–æ–∑–æ–≤ –ú.–ú.\n–ù–æ–≤–∏–∫–æ–≤ –ù.–ù.';
      default:
        return '–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ, –∫–∞–∂–¥–æ–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏';
    }
  };

  const getDescription = () => {
    switch (type) {
      case 'teachers':
        return '–í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π, –∫–∞–∂–¥–æ–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏. –¶–≤–µ—Ç –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.';
      case 'subjects':
        return '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤, –∫–∞–∂–¥–æ–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏. –¶–≤–µ—Ç –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.';
      case 'rooms':
        return '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∞—É–¥–∏—Ç–æ—Ä–∏–π, –∫–∞–∂–¥–æ–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.';
      case 'groups':
        return '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø, –∫–∞–∂–¥–æ–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏. –ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.';
      case 'assistants':
        return '–í–≤–µ–¥–∏—Ç–µ –§–ò–û –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–≤, –∫–∞–∂–¥–æ–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.';
      default:
        return '–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ, –∫–∞–∂–¥–æ–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.';
    }
  };

  if (!isOpen) return null;

  return (
    <div className="modal-overlay" onClick={onClose}>
      <div className="modal-content" onClick={(e) => e.stopPropagation()}>
        <div className="modal-header">
          <h2>–ú–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ {title.toLowerCase()}</h2>
          <button className="modal-close" onClick={onClose}>√ó</button>
        </div>
        
        <div className="bulk-upload-content">
          <div className="bulk-upload-description">
            <div className="description-icon">üí°</div>
            <div className="description-text">
              {getDescription()}
            </div>
          </div>
          
          <form onSubmit={handleSubmit} className="bulk-upload-form">
            <div className="form-group">
              <label htmlFor="bulk-text">
                –°–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö *
              </label>
              <textarea
                id="bulk-text"
                value={text}
                onChange={(e) => setText(e.target.value)}
                placeholder={getPlaceholder()}
                rows={8}
                className="bulk-textarea"
                disabled={loading}
                required
              />
              <div className="form-hint">
                <span className="hint-icon">‚ÑπÔ∏è</span>
                –ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ = –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç. –ü—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –±—É–¥—É—Ç –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω—ã.
              </div>
            </div>
            
            <div className="form-actions">
              <button 
                type="button" 
                onClick={onClose} 
                className="btn-secondary"
                disabled={loading}
              >
                –û—Ç–º–µ–Ω–∞
              </button>
              <button 
                type="submit" 
                disabled={loading || !text.trim()} 
                className="btn-primary"
              >
                {loading ? '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ...' : `–î–æ–±–∞–≤–∏—Ç—å (${text.split('\n').filter(line => line.trim()).length})`}
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
};

export default BulkUploadDialog;
