import React, { memo, useState } from 'react';
import { useDraggable } from '@dnd-kit/core';
import { Lesson } from '../types';
import { ConflictInfo } from '../utils/scheduleUtils';
import { useCopyPaste } from '../contexts/CopyPasteContext';

interface DraggableLessonProps {
  lesson: Lesson;
  startSlotIndex: number;
  span: number;
  groupIndex: number;
  hasConflicts?: boolean;
  conflictTypes?: string[];
  conflictDetails?: ConflictInfo[];
  onEdit?: (lesson: Lesson) => void;
  onDelete?: (lessonId: string) => void;
  onResize?: (lessonId: string, newDuration: number) => void;
  onShowConflicts?: (conflicts: ConflictInfo[]) => void;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —É—Ä–æ–∫–∞
const getLessonTime = (startSlotIndex: number, duration: number): string => {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
  // startSlotIndex —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω–¥–µ–∫—Å—É –≤ –º–∞—Å—Å–∏–≤–µ timeSlots
  const startHour = startSlotIndex < 6 ? 8 : 8 + Math.floor((startSlotIndex - 6) / 12) + 1;
  const startMinute = startSlotIndex < 6 ? 30 + (startSlotIndex * 5) : ((startSlotIndex - 6) % 12) * 5;
  
  const endMinute = startMinute + duration;
  const endHour = startHour + Math.floor(endMinute / 60);
  const finalEndMinute = endMinute % 60;
  
  const startTime = `${startHour.toString().padStart(2, '0')}:${startMinute.toString().padStart(2, '0')}`;
  const endTime = `${endHour.toString().padStart(2, '0')}:${finalEndMinute.toString().padStart(2, '0')}`;
  
  return `${startTime}-${endTime}`;
};


const DraggableLesson: React.FC<DraggableLessonProps> = ({ 
  lesson, 
  startSlotIndex, 
  span, 
  groupIndex,
  hasConflicts = false,
  conflictTypes = [],
  conflictDetails = [],
  onEdit,
  onDelete,
  onResize,
  onShowConflicts
}) => {
  const [showTeacherTooltip, setShowTeacherTooltip] = useState(false);
  const [showAssistantTooltip, setShowAssistantTooltip] = useState(false);
  const { copyLesson } = useCopyPaste();
  
  const {
    attributes,
    listeners,
    setNodeRef,
    transform,
    isDragging,
  } = useDraggable({
    id: lesson.id,
  });



  const backgroundColor = lesson.color || lesson.teacher_color || lesson.subject_color || '#667eea';

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
  const getConflictStyles = () => {
    if (!hasConflicts) return {};
    
    const conflictStyles: React.CSSProperties = {};
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Å–Ω—É—é —Ä–∞–º–∫—É –¥–ª—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    conflictStyles.border = '2px solid #ff3b30';
    conflictStyles.boxShadow = '0 0 8px rgba(255, 59, 48, 0.5)';
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç —É—á–∏—Ç–µ–ª—è, –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ä–∞–Ω–∂–µ–≤—ã–π –æ—Ç—Ç–µ–Ω–æ–∫
    if (conflictTypes.includes('teacher')) {
      conflictStyles.borderLeftColor = '#ff9500';
      conflictStyles.borderLeftWidth = '4px';
    }
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç –∫–∞–±–∏–Ω–µ—Ç–∞, –¥–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Å–Ω—ã–π –æ—Ç—Ç–µ–Ω–æ–∫
    if (conflictTypes.includes('room')) {
      conflictStyles.borderTopColor = '#ff3b30';
      conflictStyles.borderTopWidth = '4px';
    }
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç –≥—Ä—É–ø–ø—ã, –¥–æ–±–∞–≤–ª—è–µ–º —Å–∏–Ω–∏–π –æ—Ç—Ç–µ–Ω–æ–∫
    if (conflictTypes.includes('group')) {
      conflictStyles.borderRightColor = '#007aff';
      conflictStyles.borderRightWidth = '4px';
    }
    
    return conflictStyles;
  };

  const style: React.CSSProperties = {
    gridColumn: `${startSlotIndex + 2} / span ${span}`,
    gridRow: 1,
    backgroundColor: backgroundColor,
    transform: transform ? `translate3d(${transform.x}px, ${transform.y}px, 0)` : undefined,
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    zIndex: isDragging ? 1000 : 10,
    // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è GPU —É—Å–∫–æ—Ä–µ–Ω–∏—è
    willChange: isDragging ? 'transform' : 'auto',
    backfaceVisibility: 'hidden',
    perspective: 1000,
    ...getConflictStyles(),
  };

  const lessonTime = getLessonTime(startSlotIndex, lesson.duration);

  const handleEdit = (e: React.MouseEvent) => {
    e.stopPropagation();
    if (onEdit) {
      onEdit(lesson);
    }
  };

  const handleDelete = (e: React.MouseEvent) => {
    e.stopPropagation();
    if (onDelete && window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —É—Ä–æ–∫?')) {
      onDelete(lesson.id);
    }
  };

  const handleCopy = (e: React.MouseEvent) => {
    e.stopPropagation();
    copyLesson(lesson);
  };


  return (
    <div
      ref={setNodeRef}
      style={style}
      className={`lesson ${isDragging ? 'dragging' : ''}`}
      {...attributes}
    >
      {/* –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –¥–ª—è drag-and-drop */}
      <div 
        className="lesson-drag-area"
        {...listeners}
        style={{ 
          position: 'absolute', 
          top: 0, 
          left: 0, 
          right: 0, 
          bottom: 0,
          zIndex: 5
        }}
      >
        <div className="lesson-aligned">
          <div className="lesson-time">
            {lessonTime}
            {hasConflicts && (
              <span 
                className="conflict-indicator clickable" 
                title="–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞—Ö"
                onClick={(e) => {
                  e.stopPropagation();
                  if (onShowConflicts && conflictDetails.length > 0) {
                    onShowConflicts(conflictDetails);
                  }
                }}
              >
                ‚ö†Ô∏è
              </span>
            )}
          </div>
          <div className="lesson-data-row">{lesson.subject_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç'}</div>
          <div className="lesson-data-row">
            {lesson.teacher_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å'}
            {lesson.additional_teachers && lesson.additional_teachers.length > 0 && lesson.additional_teachers.filter(t => t).length > 0 && (
              <span 
                className="additional-staff clickable"
                onClick={(e) => {
                  e.stopPropagation();
                  setShowTeacherTooltip(!showTeacherTooltip);
                }}
                onMouseEnter={() => setShowTeacherTooltip(true)}
                onMouseLeave={() => setShowTeacherTooltip(false)}
              >
                +{lesson.additional_teachers.filter(t => t).length}
                {showTeacherTooltip && (
                  <div className="tooltip">
                    <div className="tooltip-content">
                      <strong>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏:</strong>
                      {lesson.additional_teachers.filter(t => t).map((teacher, index) => (
                        <div key={teacher.id} style={{ color: teacher.color }}>
                          {index + 1}. {teacher?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å'}
                        </div>
                      ))}
                    </div>
                  </div>
                )}
              </span>
            )}
          </div>
          <div className="lesson-data-row">
            {lesson.assistant_name || '‚Äî'}
            {lesson.additional_assistants && lesson.additional_assistants.length > 0 && lesson.additional_assistants.filter(a => a).length > 0 && (
              <span 
                className="additional-staff clickable"
                onClick={(e) => {
                  e.stopPropagation();
                  setShowAssistantTooltip(!showAssistantTooltip);
                }}
                onMouseEnter={() => setShowAssistantTooltip(true)}
                onMouseLeave={() => setShowAssistantTooltip(false)}
              >
                +{lesson.additional_assistants.filter(a => a).length}
                {showAssistantTooltip && (
                  <div className="tooltip">
                    <div className="tooltip-content">
                      <strong>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã:</strong>
                      {lesson.additional_assistants.filter(a => a).map((assistant, index) => (
                        <div key={assistant.id}>
                          {index + 1}. {assistant?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç'}
                        </div>
                      ))}
                    </div>
                  </div>
                )}
              </span>
            )}
          </div>
          <div className="lesson-data-row">{lesson.room_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è'}</div>
        </div>
        
        {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
        <div className="lesson-actions">
          <button 
            className="lesson-action-btn copy-btn"
            onClick={handleCopy}
            title="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —É—Ä–æ–∫"
          >
            üìã
          </button>
          {onEdit && (
            <button 
              className="lesson-action-btn edit-btn"
              onClick={handleEdit}
              title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É—Ä–æ–∫"
            >
              ‚úèÔ∏è
            </button>
          )}
          {onDelete && (
            <button 
              className="lesson-action-btn delete-btn"
              onClick={handleDelete}
              title="–£–¥–∞–ª–∏—Ç—å —É—Ä–æ–∫"
            >
              üóëÔ∏è
            </button>
          )}
        </div>

        {/* –ö–Ω–æ–ø–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ - —Å–ª–µ–≤–∞ –∏ —Å–ø—Ä–∞–≤–∞ */}
        {onResize && (
          <>
            {/* –ö–Ω–æ–ø–∫–∞ —É–º–µ–Ω—å—à–µ–Ω–∏—è - —Å–ª–µ–≤–∞ */}
            <button 
              className="lesson-resize-btn resize-left"
              onClick={() => {
                console.log('Resize -5 clicked');
                const validDurations = [10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60];
                const currentIndex = validDurations.indexOf(lesson.duration);
                if (currentIndex > 0) {
                  onResize(lesson.id, validDurations[currentIndex - 1]);
                }
              }}
              title="–£–º–µ–Ω—å—à–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"
              disabled={lesson.duration <= 10}
            >
              -
            </button>
            {/* –ö–Ω–æ–ø–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏—è - —Å–ø—Ä–∞–≤–∞ */}
            <button 
              className="lesson-resize-btn resize-right"
              onClick={() => {
                console.log('Resize +5 clicked');
                const validDurations = [10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60];
                const currentIndex = validDurations.indexOf(lesson.duration);
                if (currentIndex < validDurations.length - 1) {
                  onResize(lesson.id, validDurations[currentIndex + 1]);
                }
              }}
              title="–£–≤–µ–ª–∏—á–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"
              disabled={lesson.duration >= 60}
            >
              +
            </button>
          </>
        )}
      </div>


    </div>
  );
};

export default memo(DraggableLesson);
