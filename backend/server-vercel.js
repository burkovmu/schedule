const express = require('express');
const cors = require('cors');
const { v4: uuidv4 } = require('uuid');

const app = express();
const PORT = process.env.PORT || 5000;

// Middleware
app.use(cors({
  origin: true,
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With', 'Accept', 'Origin']
}));
app.use(express.json());

// –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≤ –ø–∞–º—è—Ç–∏ (–¥–ª—è Vercel)
let dataStore = {
  groups: [
    { id: 'group1', name: '–ì—Ä—É–ø–ø–∞ –ê', display_order: 1 },
    { id: 'group2', name: '–ì—Ä—É–ø–ø–∞ –ë', display_order: 2 },
    { id: 'group3', name: '–ì—Ä—É–ø–ø–∞ –í', display_order: 3 }
  ],
  subjects: [
    { id: 'subj1', name: '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞', color: '#667eea' },
    { id: 'subj2', name: '–§–∏–∑–∏–∫–∞', color: '#f093fb' },
    { id: 'subj3', name: '–•–∏–º–∏—è', color: '#4facfe' },
    { id: 'subj4', name: '–ë–∏–æ–ª–æ–≥–∏—è', color: '#43e97b' }
  ],
  teachers: [
    { id: 'teach1', name: '–ò–≤–∞–Ω–æ–≤ –ò.–ò.' },
    { id: 'teach2', name: '–ü–µ—Ç—Ä–æ–≤ –ü.–ü.' },
    { id: 'teach3', name: '–°–∏–¥–æ—Ä–æ–≤ –°.–°.' }
  ],
  assistants: [
    { id: 'assist1', name: '–ö–æ–∑–ª–æ–≤ –ö.–ö.' },
    { id: 'assist2', name: '–ú–æ—Ä–æ–∑–æ–≤ –ú.–ú.' }
  ],
  rooms: [
    { id: 'room1', name: '–ê—É–¥–∏—Ç–æ—Ä–∏—è 101' },
    { id: 'room2', name: '–ê—É–¥–∏—Ç–æ—Ä–∏—è 102' },
    { id: 'room3', name: '–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è 201' },
    { id: 'room4', name: '–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è 202' }
  ],
  lessons: []
};

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
const generateTimeSlots = () => {
  const timeSlots = [];
  let slotId = 1;

  for (let hour = 9; hour < 18; hour++) {
    for (let minute = 0; minute < 60; minute += 5) {
      const startHour = hour;
      const startMinute = minute;
      const endMinute = minute + 5;
      const endHour = endMinute >= 60 ? hour + 1 : hour;
      const finalEndMinute = endMinute >= 60 ? endMinute - 60 : endMinute;
      
      if (endHour > 18 || (endHour === 18 && finalEndMinute > 0)) {
        break;
      }
      
      const startTime = `${startHour.toString().padStart(2, '0')}:${startMinute.toString().padStart(2, '0')}`;
      const endTime = `${endHour.toString().padStart(2, '0')}:${finalEndMinute.toString().padStart(2, '0')}`;
      
      timeSlots.push({
        id: slotId.toString(),
        startTime: startTime,
        endTime: endTime,
        displayTime: startTime
      });
      
      slotId++;
    }
  }
  
  return timeSlots;
};

// API Routes

// –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
app.get('/api/lessons/time-slots/all', (req, res) => {
  res.json(generateTimeSlots());
});

// –ì—Ä—É–ø–ø—ã
app.get('/api/groups', (req, res) => {
  res.json(dataStore.groups.sort((a, b) => a.display_order - b.display_order));
});

app.post('/api/groups', (req, res) => {
  const { name, display_order } = req.body;
  const id = uuidv4();
  const newGroup = { id, name, display_order: display_order || 0 };
  dataStore.groups.push(newGroup);
  res.json(newGroup);
});

app.delete('/api/groups/:id', (req, res) => {
  const { id } = req.params;
  dataStore.groups = dataStore.groups.filter(g => g.id !== id);
  res.json({ message: '–ì—Ä—É–ø–ø–∞ —É–¥–∞–ª–µ–Ω–∞' });
});

// –ü—Ä–µ–¥–º–µ—Ç—ã
app.get('/api/subjects', (req, res) => {
  res.json(dataStore.subjects);
});

app.post('/api/subjects', (req, res) => {
  const { name, color } = req.body;
  const id = uuidv4();
  const newSubject = { id, name, color: color || '#667eea' };
  dataStore.subjects.push(newSubject);
  res.json(newSubject);
});

app.delete('/api/subjects/:id', (req, res) => {
  const { id } = req.params;
  dataStore.subjects = dataStore.subjects.filter(s => s.id !== id);
  res.json({ message: '–ü—Ä–µ–¥–º–µ—Ç —É–¥–∞–ª–µ–Ω' });
});

// –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏
app.get('/api/teachers', (req, res) => {
  res.json(dataStore.teachers);
});

app.post('/api/teachers', (req, res) => {
  const { name } = req.body;
  const id = uuidv4();
  const newTeacher = { id, name };
  dataStore.teachers.push(newTeacher);
  res.json(newTeacher);
});

app.delete('/api/teachers/:id', (req, res) => {
  const { id } = req.params;
  dataStore.teachers = dataStore.teachers.filter(t => t.id !== id);
  res.json({ message: '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω' });
});

// –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã
app.get('/api/assistants', (req, res) => {
  res.json(dataStore.assistants);
});

app.post('/api/assistants', (req, res) => {
  const { name } = req.body;
  const id = uuidv4();
  const newAssistant = { id, name };
  dataStore.assistants.push(newAssistant);
  res.json(newAssistant);
});

app.delete('/api/assistants/:id', (req, res) => {
  const { id } = req.params;
  dataStore.assistants = dataStore.assistants.filter(a => a.id !== id);
  res.json({ message: '–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç —É–¥–∞–ª–µ–Ω' });
});

// –ê—É–¥–∏—Ç–æ—Ä–∏–∏
app.get('/api/rooms', (req, res) => {
  res.json(dataStore.rooms);
});

app.post('/api/rooms', (req, res) => {
  const { name } = req.body;
  const id = uuidv4();
  const newRoom = { id, name };
  dataStore.rooms.push(newRoom);
  res.json(newRoom);
});

app.delete('/api/rooms/:id', (req, res) => {
  const { id } = req.params;
  dataStore.rooms = dataStore.rooms.filter(r => r.id !== id);
  res.json({ message: '–ö–∞–±–∏–Ω–µ—Ç —É–¥–∞–ª–µ–Ω' });
});

// –£—Ä–æ–∫–∏
app.get('/api/lessons', (req, res) => {
  const lessonsWithNames = dataStore.lessons.map(lesson => {
    const group = dataStore.groups.find(g => g.id === lesson.group_id);
    const subject = dataStore.subjects.find(s => s.id === lesson.subject_id);
    const teacher = dataStore.teachers.find(t => t.id === lesson.teacher_id);
    const assistant = dataStore.assistants.find(a => a.id === lesson.assistant_id);
    const room = dataStore.rooms.find(r => r.id === lesson.room_id);
    
    return {
      ...lesson,
      group_name: group?.name,
      subject_name: subject?.name,
      subject_color: subject?.color,
      teacher_name: teacher?.name,
      assistant_name: assistant?.name,
      room_name: room?.name
    };
  });
  
  res.json(lessonsWithNames.sort((a, b) => a.time_slot.localeCompare(b.time_slot)));
});

app.post('/api/lessons', (req, res) => {
  const { group_id, time_slot, subject_id, teacher_id, assistant_id, room_id, duration, color, comment } = req.body;
  const id = uuidv4();
  const newLesson = {
    id,
    group_id,
    time_slot,
    subject_id,
    teacher_id,
    assistant_id,
    room_id,
    duration: duration || 45,
    color,
    comment
  };
  dataStore.lessons.push(newLesson);
  res.json(newLesson);
});

app.put('/api/lessons/:id', (req, res) => {
  const { id } = req.params;
  const updates = req.body;
  
  const lessonIndex = dataStore.lessons.findIndex(l => l.id === id);
  if (lessonIndex === -1) {
    return res.status(404).json({ error: '–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
  }
  
  dataStore.lessons[lessonIndex] = { ...dataStore.lessons[lessonIndex], ...updates };
  res.json({ message: '–£—Ä–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω' });
});

app.delete('/api/lessons/:id', (req, res) => {
  const { id } = req.params;
  dataStore.lessons = dataStore.lessons.filter(l => l.id !== id);
  res.json({ message: '–£—Ä–æ–∫ —É–¥–∞–ª–µ–Ω' });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: In-Memory (Vercel)`);
});

// Graceful shutdown
process.on('SIGINT', () => {
  console.log('\nüõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞...');
  process.exit(0);
});
